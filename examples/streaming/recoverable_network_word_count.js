/*
 * Copyright 2016 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: bin/eclairjs.sh examples/streaming/network_word_count <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/eclairjs.sh ./examples/streaming/network_word_count localhost 9999`
 */

/**
 * Counts words in text encoded with UTF8 received from the network every second.
 *
 * Usage: bin/eclairjs.sh examples/streaming/recoverable_network_word_count.js  \
 *          <hostname> <port> <checkpoint-directory> <output-file>
 *   <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive
 *   data. <checkpoint-directory> directory to HDFS-compatible file system which checkpoint data
 *   <output-file> file to which the word counts will be appended
 *
 * <checkpoint-directory> and <output-file> must be absolute paths
 *
 * To run this on your local machine, you need to first run a Netcat server
 *
 *      `$ nc -lk 9999`
 *
 * and run the example as
 *
 *      `$ bin/eclairjs.sh ./examples/streaming/recoverable_network_word_count.js \
 *              localhost 9999 ~/checkpoint/ ~/out`
 *
 * If the directory ~/checkpoint/ does not exist (e.g. running for the first time), it will create
 * a new StreamingContext (will print "Creating new context" to the console). Otherwise, if
 * checkpoint data exists in ~/checkpoint/, then it will create StreamingContext from
 * the checkpoint data.
 *
 * Refer to the online documentation for more details.
 */
var Duration = require('eclairjs/streaming/Duration');
var StreamingContext = require('eclairjs/streaming/StreamingContext');
var Tuple = require('eclairjs/Tuple');
var SparkConf = require(EclairJS_Globals.NAMESPACE + '/SparkConf');

if ((typeof args == "undefined") || args.length < 5) {
    print(
        "Usage: recoverable_network_word_count.js <hostname> <port> <checkpoint-directory>\n" +
        "     <output-file>. <hostname> and <port> describe the TCP server that Spark\n" +
        "     Streaming would connect to receive data. <checkpoint-directory> directory to\n" +
        "     HDFS-compatible file system which checkpoint data <output-file> file to which\n" +
        "     the word counts will be appended\n" +
        "\n" +
        "In local mode, <master> should be 'local[n]' with n > 1\n" +
        "Both <checkpoint-directory> and <output-file> must be absolute paths");
    return;
}
var ip = ((typeof args !== "undefined") && (args.length > 1)) ? args[1] : "localhost";
var port = ((typeof args !== "undefined") && (args.length > 2)) ? 0 + args[2] : 9999;
var checkpointDirectory = ((typeof args !== "undefined") && (args.length > 3)) ? args[3] : "~/checkpoint/";
var outputPath = ((typeof args !== "undefined") && (args.length > 4)) ? args[4] : "~/out";


print("Using checkpoint directory - " + checkpointDirectory)

function createContext(ip, port, checkpointDirectory, outputPath) {

    // If you do not see this printed, that means the StreamingContext has been loaded
    // from the new checkpoint
    print("Creating new context");

    // Create the context with a 1 second batch size
    var conf = new SparkConf().setAppName("Javascript Recoverable Network Word Count");
    var ssc = new StreamingContext(conf, new Duration(1000));
    ssc.checkpoint(checkpointDirectory);


    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    var lines = ssc.socketTextStream(ip, port);
    var words = lines.flatMap(function (x) {
        return x.split(/\s+/);
    });
    var wordCounts = words.mapToPair(
        function (s) {
            return new Tuple(s, 1);
        }).reduceByKey(function (i1, i2) {
        return i1 + i2;
    });

    wordCounts.foreachRDDWithTime(function (rdd, time) {
        var counts = "Counts sat time " + time + " " + rdd.collect();
        print(counts);
        return null;
    });

    return ssc;
}

var ssc = StreamingContext.getOrCreate(checkpointDirectory, function () {
    return createContext(ip, port, checkpointDirectory, outputPath);
});
ssc.start();
ssc.awaitTermination();
