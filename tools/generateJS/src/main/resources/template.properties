copyright=/*                                                                         \n\
* Copyright 2016 IBM Corp.                                                 \n\
*                                                                          \n\
* Licensed under the Apache License, Version 2.0 (the "License");          \n\
* you may not use this file except in compliance with the License.         \n\
* You may obtain a copy of the License at                                  \n\
*                                                                          \n\
*      http://www.apache.org/licenses/LICENSE-2.0                          \n\
*                                                                          \n\
* Unless required by applicable law or agreed to in writing, software      \n\
* distributed under the License is distributed on an "AS IS" BASIS,        \n\
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n\
* See the License for the specific language governing permissions and      \n\
* limitations under the License.                                           \n\
*/ \n\
\n

eclair_version=0.7

node_defaultRequires=\n\
var Utils = require('%s/utils.js');\n

nashorn_constructorDefault=\
var %s = function(%s) {\n\
  \t %s\n\
  \t this.logger = Logger.getLogger("%s_js");\n\
  \t %s.call(this, jvmObject);\n\
\n\
};\n

node_constructorDefault=\
function %s(kernelP, refIdP%s) {\n\
  \t this.kernelP = kernelP;\n\
  \t this.refIdP = refIdP;\n\
  \t %s\n\
};\n

node_constructorAbstract=\
function %s(kernelP, refIdP%s) {\n\
    \t throw "Can't instantiate abstract class - %s";\n\
}\n


nashorn_objectDefault=%s.prototype = Object.create(%s.prototype);\n\
\n\
%s.prototype.constructor = %s;\n\
\n

nashorn_postlude=\n\
module.exports = %s;\n



node_postlude=\n\
module.exports = %s;\n


node_templateStrAssign=\n\
  var templateStr = 'var {{refId}} = %s.%s(%s);';\n

node_genAssign=\n\
  return Utils.generateAssignment(this, %s, templateStr %s);\n

node_templateVoidPromise=\n\
  var templateStr = '%s.%s(%s);';

node_genVoidPromise=\n\
  return Utils.generateVoidPromise(this, templateStr %s);\n

node_resolve=\n\
  function _resolve(result, resolve, reject) {\n\
    \ttry {\n\
    \t\tvar returnValue=%s;\n\
    \t\tresolve(returnValue);\n\
    \t} catch (e) {\n\
    \t\tvar err = new Error("Parse Error: "+ e.message);\n\
    \t\treject(err);\n\
    \t}\n\
  };\n

node_templatePromise=\n\
  var templateStr = '%s.%s(%s);';

node_templatePromiseArray=\n\
  var templateStr = 'JSON.stringify({{inRefId}}.%s(%s));';

node_genPromise=\n\
  return Utils.generateResultPromise(this, templateStr  %s, _resolve);

defaultBody=  throw "not implemented by ElairJS";\n

abstractConstructor=\
var %s = function(%s) {\n\
    \t throw "Can't instantiate abstract class - %s";\n\
 \\\\ \t this.logger = Logger.getLogger("%s_js");\n\
 \\\\ \t %s.call(this, jvmObject);\n\
\n\
};\n

since_tag=EclairJS %s Spark %s



